{"version":3,"sources":["Messages.js","Input.js","Components/RandomName.js","App.js","serviceWorker.js","index.js"],"names":["Messages","props","messages","className","map","m","message","style","backgroundColor","Math","floor","random","toString","member","text","console","log","id","currentMember","username","clientData","color","makeMessage","Input","useState","setText","onSubmit","e","preventDefault","onSendMessage","onChange","target","value","type","placeholder","autofocus","randomName","adjectives","nouns","length","App","state","drone","publish","room","window","Scaledrone","data","on","error","clientId","setState","subscribe","historyCount","push","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.314fa21d.chunk.js","sourcesContent":["import React from \"react\";\nfunction randomColor() {\n  return \"#\" + Math.floor(Math.random() * 0xffffff).toString(16);\n}\nconst Messages = (props) => {\n  const messages = props.messages;\n\n  const makeMessage = (message) => {\n    if (typeof message == \"string\") {\n      return (\n        <li className='Messages-message'>\n          <span className=\"avatar\" style={{backgroundColor:randomColor()}}/>\n          <div className=\"Message-content\">\n          <div className=\"username\">anonymous</div>\n          <div className=\"text\">{message}</div>\n          </div>\n        </li>\n      )\n    } else {\n      const { member, text } = message;\n      console.log(member);\n      const messageFromMe = member.id === props.currentMember.id;\n      const className = messageFromMe\n        ? \"Messages-message currentMember\"\n        : \"Messages-message\";\n      const username = member.username\n        ? member.username\n        : member.clientData.username;\n      return (\n        <li className={className}>\n          <span className=\"avatar\" style={{ backgroundColor: member.color }} />\n          <div className=\"Message-content\">\n            <div className=\"username\">{username}</div>\n            <div className=\"text\">{text}</div>\n          </div>\n        </li>\n      );\n    }\n  };\n\n  return (\n    <ul className=\"Messages-List\">{messages.map((m) => makeMessage(m))}</ul>\n  );\n};\n\nexport default Messages;\n","import React, {useState} from \"react\"\n\n\nconst Input = (props) =>{\n  const [text, setText] = useState(\"\")\n\n  const onChange = (e) =>{\n    setText(e.target.value)\n  }\n\n  const onSubmit = (e)=> {\n    e.preventDefault();\n    props.onSendMessage(text)\n    setText(\"\")\n  }\n\n\n  return ( \n    <div className=\"Input\">\n      <form onSubmit={e => onSubmit(e)}>\n        <input onChange={e=> onChange(e)}\n        value={text}\n        type=\"text\"\n        placeholder=\"Enter your message and press ENTER\"\n        autofocus=\"true\" />\n        <button>Send</button>\n      </form>\n    </div>\n  )\n}\n\n\nexport default Input","const randomName = () => {\n    const adjectives = [\n      \"autumn\", \"hidden\", \"bitter\", \"misty\", \"silent\", \"empty\", \"dry\", \"dark\",\n      \"summer\", \"icy\", \"delicate\", \"quiet\", \"white\", \"cool\", \"spring\", \"winter\",\n      \"patient\", \"twilight\", \"dawn\", \"crimson\", \"wispy\", \"weathered\", \"blue\",\n      \"billowing\", \"broken\", \"cold\", \"damp\", \"falling\", \"frosty\", \"green\", \"long\",\n      \"late\", \"lingering\", \"bold\", \"little\", \"morning\", \"muddy\", \"old\", \"red\",\n      \"rough\", \"still\", \"small\", \"sparkling\", \"throbbing\", \"shy\", \"wandering\",\n      \"withered\", \"wild\", \"black\", \"young\", \"holy\", \"solitary\", \"fragrant\",\n      \"aged\", \"snowy\", \"proud\", \"floral\", \"restless\", \"divine\", \"polished\",\n      \"ancient\", \"purple\", \"lively\", \"nameless\"\n    ];\n    const nouns = [\n      \"waterfall\", \"river\", \"breeze\", \"moon\", \"rain\", \"wind\", \"sea\", \"morning\",\n      \"snow\", \"lake\", \"sunset\", \"pine\", \"shadow\", \"leaf\", \"dawn\", \"glitter\",\n      \"forest\", \"hill\", \"cloud\", \"meadow\", \"sun\", \"glade\", \"bird\", \"brook\",\n      \"butterfly\", \"bush\", \"dew\", \"dust\", \"field\", \"fire\", \"flower\", \"firefly\",\n      \"feather\", \"grass\", \"haze\", \"mountain\", \"night\", \"pond\", \"darkness\",\n      \"snowflake\", \"silence\", \"sound\", \"sky\", \"shape\", \"surf\", \"thunder\",\n      \"violet\", \"water\", \"wildflower\", \"wave\", \"water\", \"resonance\", \"sun\",\n      \"wood\", \"dream\", \"cherry\", \"tree\", \"fog\", \"frost\", \"voice\", \"paper\", \"frog\",\n      \"smoke\", \"star\"\n    ];\n    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n    const noun = nouns[Math.floor(Math.random() * nouns.length)];\n    return adjective + noun;\n  }\n\n  export default randomName","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Messages from \"./Messages\";\nimport Input from \"./Input\";\nimport randomName from \"./Components/RandomName\";\n\nfunction randomColor() {\n  return \"#\" + Math.floor(Math.random() * 0xffffff).toString(16);\n}\n\nclass App extends Component {\n  state = {\n    messages: [],\n    member: {\n      username: randomName(),\n      color: randomColor(),\n    },\n  };\n\n  constructor() {\n    console.log(\"constructing\");\n    super();\n    this.drone = new window.Scaledrone(\"LqGWo3ivIY8yJwEG\", {\n      data: this.state.member,\n    });\n    this.drone.on(\"open\", (error) => {\n      if (error) {\n        return console.error(error);\n      }\n      const member = { ...this.state.member };\n      member.id = this.drone.clientId;\n      this.setState({ member });\n    });\n    const room = this.drone.subscribe(\"observable-room\", {\n      historyCount: 5,\n    });\n    room.on(\"history_message\", (message) => {\n      const messages = this.state.messages;\n      const data = message.data \n      messages.push(data)\n      this.setState({messages})\n      \n    });\n    room.on(\"data\", (data, member) => {\n      const messages = this.state.messages;\n      messages.push({ member, text: data });\n      this.setState({ messages });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>Nick's Lounge</h1>\n        </div>\n        <Messages\n          messages={this.state.messages}\n          currentMember={this.state.member}\n        />\n        <Input onSendMessage={this.onSendMessage} />\n      </div>\n    );\n  }\n\n  onSendMessage = (message) => {\n    this.drone.publish({\n      room: \"observable-room\",\n      message,\n    });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}